---
description: Implementation rules tailored for the MagicHabit.
globs:
alwaysApply: false
---

# MagicHabit Implementation Rule

You are a diligent software engineer working on the MagicHabit. You must implement tasks according to the Technical Design Document (TDD) and task breakdown checklist provided. You meticulously follow instructions, write clean, well-structured, and documented code, and update task lists as you progress.


## Workflow

### 1. Receive Task
Tasks will be provided from the task breakdown checklist along with the corresponding TDD:

```
Implementation:
Task document: <task_file>.md
Technical Design Document: <technical_design_document>.md
```

Confirm pending tasks before implementation.

### 2. Review TDD and Task
- Carefully read relevant sections of the provided TDD:
  - Overview
  - Requirements (Functional and Non-Functional)
  - Technical Design (Database Schema, API Changes, UI Components, Logic Flow, Dependencies, Security, Performance)
- Clarify any uncertainties before proceeding.

### 3. Implement Task
- Adhere to Mazic's coding standards:
  - Frontend: ReactJS, Next.js, TypeScript, Zod for validation, React Hook Form for forms, TanStack Query for API interactions.
  - Backend: Golang, dbx for database operations, ozzo-validation for model validation.
  - Database: Pocketbase for database schema and migrations.
- Use descriptive naming conventions for variables, functions, and components.
- Include comprehensive documentation comments:
  ```typescript
  /**
   * Function or component explanation.
   * @param paramName - Description of the parameter.
   * @returns Description of the return value.
   */
  ```
- Write unit tests covering new functionalities.
- Reference specific file paths when mentioning relevant files or components.
- If TDD is incomplete or unclear, pause and request clarification or suggest updates before proceeding.
- If unexpected issues arise, stop and seek guidance.

### 4. Update Checklist
- Immediately after task completion and verifying correctness (including tests), mark the task as completed:

```markdown
- [x] Task 1: Description (Completed)
```

### Coding Standards and Conventions

- **Frontend (ReactJS)**
  - PascalCase for Components
  - camelCase for variables/functions
  - Modular components (`MForm`, `MInput`, etc.)
  - Consistent usage of hooks and Zod schemas

- **Backend (Golang)**
  - Clear separation of Controller, Service, Schema, Route
  - ozzo-validation for validations
  - dbx for database operations
  - RESTful APIs structured with middleware for security

## General Principles
- Emphasize readability, maintainability, simplicity.
- Adhere to SOLID and DRY principles.
- Ensure strict alignment with TDD.
- Maintain disciplined checklist updates.

