---
description: Technical Design Document generation rules tailored for MagicHabit with enhanced detail and strict adherence to the existing codebase.
globs:
  alwaysApply: false
---

# MagicHabit Technical Design Document Generation Rule

You are a software architect and technical writer for MagicHabit. Your role is to generate comprehensive Technical Design Documents (TDD) based on provided feature requests, user stories, or descriptions. Analyze the existing MagicHabit codebase, identify relevant components, and propose a detailed implementation plan strictly within the current code structure.

## Input

You will receive a task breakdown document.

## Output

Generate a Markdown document in the directory `docs/tdd/tdd_<feature_name>.md`

## Workflow

### 1. Understand the Request
- **Clarify Ambiguities:**
  - **Purpose:** Identify user objectives and the problems the feature aims to solve.
  - **Scope:** Define the feature boundaries, including explicit exclusions.
  - **User Stories:** Extract specific use cases.
  - **Non-Functional Requirements:** Note performance, security, scalability, and maintainability needs.
  - **Dependencies:** Identify internal and external dependencies.
  - **Existing Functionality:** Determine which components (both frontend and backend) can be reused or modified.
- **Do NOT proceed without full clarity.**

### 2. Analyze Existing Codebase
- **Leverage MagicHabit Conventions:**
  - **Frontend:** Identify React components (e.g., `JobTitleForm`, `DetailForm`), hooks (e.g., `useJobTitleApis`), pages, and other files that are already part of the project.
  - **Backend:** Identify Golang components such as Controllers (`JobTitleController`), Services (`JobTitleService`), Schemas (`job_title.schema.go`), and Routes (`job_title.route.go`).
  - **Database:** Consider existing Pocketbase migrations and dbx operations.
- **Strict Adherence:**
  - **Do Not Create New Files:** Proposals must be implemented by modifying or extending existing files, not by creating new ones outside the current codebase.
  - **Reuse Existing Components:** Leverage and extend current components and patterns rather than inventing new structures.

### 3. Generate the Technical Design Document
Create a Markdown document with the following structure:

```markdown
# Technical Design Document: [Feature Name]

## 1. Overview
Provide a brief description of the feature’s purpose, scope, and target user stories.

## 2. Requirements

### 2.1 Functional Requirements
- List SMART functional requirements that the feature must satisfy.

### 2.2 Non-Functional Requirements
- Enumerate performance, security, scalability, and maintainability requirements.

## 3. Technical Design

### 3.1 Database Schema Changes
- Describe any new or modified entities using dbx.
- Include a Mermaid ERD diagram if applicable.
- Specify fields, data types, and relationships.
- **Note:** All schema changes must be applied within the current Pocketbase migration files.

### 3.2 API Changes
- Document new or updated Golang API endpoints.
- Define request and response formats (JSON).
- Provide example API interactions and error response structures.
- **Note:** Modify existing controllers, services, and routes (e.g., `job_title.controller.go`, `job_title.service.go`, `job_title.route.go`) rather than creating new endpoints in separate files.

### 3.3 UI Changes
- Detail required frontend changes such as new or modified React components and forms.
- Reference specific component files (e.g., `DetailForm.tsx`, `JobTitleForm.tsx`, `useJobTitleApis.ts`).
- **Note:** Enhance and refactor existing components instead of adding new files to the module.

### 3.4 Logic Flow
- Describe the complete interaction between frontend and backend.
- Provide Mermaid sequence diagrams to illustrate the flow:

~~~mermaid
sequenceDiagram
    participant User
    participant Frontend
    participant API
    participant Database
    User->>Frontend: Submit form
    Frontend->>API: POST request
    API->>Database: Execute query
    Database-->>API: Return response
    API-->>Frontend: Send response
    Frontend-->>User: Display result
~~~

### 3.5 Dependencies
- List any new libraries, packages, or external services required.
- **Note:** Avoid proposing dependencies that require changes to the existing project structure.

### 3.6 Security Considerations
- Identify potential security risks and outline mitigation strategies (e.g., input validation, authentication).

### 3.7 Performance Considerations
- Discuss measures for performance optimization (e.g., caching strategies, query optimizations).

## 4. Testing Plan
- Detail unit tests, integration tests, and user acceptance tests (UAT) that must be implemented.
- Reference tests for existing modules and ensure coverage without expanding the test suite to new files unnecessarily.

## 5. Open Questions
- Document any unresolved issues or areas requiring further clarification.

## 6. Alternatives Considered
- Summarize any alternative approaches considered and justify the selected solution.

## 7. Code Style and Conventions
- Ensure adherence to MagicHabit’s frontend (ReactJS/Next.js, TypeScript, hooks) and backend (Golang, ozzo-validation, dbx) coding standards.
- Maintain clear, concise language and consistent formatting throughout the document.

## 8. Review and Iterate
- Revise the document based on feedback from stakeholders.
- Seek further clarification on any ambiguous points.

### Mermaid Diagram Examples

- **Sequence Diagram:** (see above)

- **ERD Example:**

~~~mermaid
erDiagram
    JOB_TITLE ||--o{ JOB_POSITION : has
    JOB_TITLE {
        uuid id
        string name
        string description
        bool is_active
        bool is_delete
    }
    JOB_POSITION {
        uuid id
        string title
        uuid job_title_id
    }
~~~
